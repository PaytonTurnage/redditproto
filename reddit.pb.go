// Package redditproto defines protobuffers all of the types Reddit uses in
// their JSON api. These types are numbered t[1-6]. Each message is commented
// according to its data type.

// These messages are _not_ necessarily directly derived from the Reddit types.
// These messages are built based on what is useful to be read and used, not
// what is easy to parse from Reddit's responses.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.2
// source: reddit.proto

package redditproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Data type t1_
type Comment struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ApprovedBy          *string                `protobuf:"bytes,1,opt,name=approved_by,json=approvedBy,proto3,oneof" json:"approved_by,omitempty"`
	Author              *string                `protobuf:"bytes,2,opt,name=author,proto3,oneof" json:"author,omitempty"`
	AuthorFlairCssClass *string                `protobuf:"bytes,3,opt,name=author_flair_css_class,json=authorFlairCssClass,proto3,oneof" json:"author_flair_css_class,omitempty"`
	AuthorFlairText     *string                `protobuf:"bytes,4,opt,name=author_flair_text,json=authorFlairText,proto3,oneof" json:"author_flair_text,omitempty"`
	BannedBy            *string                `protobuf:"bytes,5,opt,name=banned_by,json=bannedBy,proto3,oneof" json:"banned_by,omitempty"`
	Body                *string                `protobuf:"bytes,6,opt,name=body,proto3,oneof" json:"body,omitempty"`
	BodyHtml            *string                `protobuf:"bytes,7,opt,name=body_html,json=bodyHtml,proto3,oneof" json:"body_html,omitempty"`
	// Field 8 is reserved for "edited".
	Gilded        *int32     `protobuf:"varint,9,opt,name=gilded,proto3,oneof" json:"gilded,omitempty"`
	LinkAuthor    *string    `protobuf:"bytes,10,opt,name=link_author,json=linkAuthor,proto3,oneof" json:"link_author,omitempty"`
	LinkUrl       *string    `protobuf:"bytes,11,opt,name=link_url,json=linkUrl,proto3,oneof" json:"link_url,omitempty"`
	NumReports    *int32     `protobuf:"varint,12,opt,name=num_reports,json=numReports,proto3,oneof" json:"num_reports,omitempty"`
	ParentId      *string    `protobuf:"bytes,13,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Replies       []*Comment `protobuf:"bytes,14,rep,name=replies,proto3" json:"replies,omitempty"`
	Subreddit     *string    `protobuf:"bytes,15,opt,name=subreddit,proto3,oneof" json:"subreddit,omitempty"`
	SubredditId   *string    `protobuf:"bytes,16,opt,name=subreddit_id,json=subredditId,proto3,oneof" json:"subreddit_id,omitempty"`
	Distinguished *string    `protobuf:"bytes,17,opt,name=distinguished,proto3,oneof" json:"distinguished,omitempty"`
	// Implements Created
	Created    *float64 `protobuf:"fixed64,18,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatedUtc *float64 `protobuf:"fixed64,19,opt,name=created_utc,json=createdUtc,proto3,oneof" json:"created_utc,omitempty"`
	// Implements Votable
	Ups   *int32 `protobuf:"varint,20,opt,name=ups,proto3,oneof" json:"ups,omitempty"`
	Downs *int32 `protobuf:"varint,21,opt,name=downs,proto3,oneof" json:"downs,omitempty"`
	Likes *bool  `protobuf:"varint,22,opt,name=likes,proto3,oneof" json:"likes,omitempty"`
	// Implements Thing
	Id   *string `protobuf:"bytes,23,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name *string `protobuf:"bytes,24,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Message-Comment hybrid fields; these are present when the comment is
	// actually a Message in the inbox, but Reddit still labels the object "t1"
	// (Comment) because that is its original type.
	Subject       *string `protobuf:"bytes,25,opt,name=subject,proto3,oneof" json:"subject,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Comment) Reset() {
	*x = Comment{}
	mi := &file_reddit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_reddit_proto_rawDescGZIP(), []int{0}
}

func (x *Comment) GetApprovedBy() string {
	if x != nil && x.ApprovedBy != nil {
		return *x.ApprovedBy
	}
	return ""
}

func (x *Comment) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Comment) GetAuthorFlairCssClass() string {
	if x != nil && x.AuthorFlairCssClass != nil {
		return *x.AuthorFlairCssClass
	}
	return ""
}

func (x *Comment) GetAuthorFlairText() string {
	if x != nil && x.AuthorFlairText != nil {
		return *x.AuthorFlairText
	}
	return ""
}

func (x *Comment) GetBannedBy() string {
	if x != nil && x.BannedBy != nil {
		return *x.BannedBy
	}
	return ""
}

func (x *Comment) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Comment) GetBodyHtml() string {
	if x != nil && x.BodyHtml != nil {
		return *x.BodyHtml
	}
	return ""
}

func (x *Comment) GetGilded() int32 {
	if x != nil && x.Gilded != nil {
		return *x.Gilded
	}
	return 0
}

func (x *Comment) GetLinkAuthor() string {
	if x != nil && x.LinkAuthor != nil {
		return *x.LinkAuthor
	}
	return ""
}

func (x *Comment) GetLinkUrl() string {
	if x != nil && x.LinkUrl != nil {
		return *x.LinkUrl
	}
	return ""
}

func (x *Comment) GetNumReports() int32 {
	if x != nil && x.NumReports != nil {
		return *x.NumReports
	}
	return 0
}

func (x *Comment) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Comment) GetReplies() []*Comment {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Comment) GetSubreddit() string {
	if x != nil && x.Subreddit != nil {
		return *x.Subreddit
	}
	return ""
}

func (x *Comment) GetSubredditId() string {
	if x != nil && x.SubredditId != nil {
		return *x.SubredditId
	}
	return ""
}

func (x *Comment) GetDistinguished() string {
	if x != nil && x.Distinguished != nil {
		return *x.Distinguished
	}
	return ""
}

func (x *Comment) GetCreated() float64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Comment) GetCreatedUtc() float64 {
	if x != nil && x.CreatedUtc != nil {
		return *x.CreatedUtc
	}
	return 0
}

func (x *Comment) GetUps() int32 {
	if x != nil && x.Ups != nil {
		return *x.Ups
	}
	return 0
}

func (x *Comment) GetDowns() int32 {
	if x != nil && x.Downs != nil {
		return *x.Downs
	}
	return 0
}

func (x *Comment) GetLikes() bool {
	if x != nil && x.Likes != nil {
		return *x.Likes
	}
	return false
}

func (x *Comment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Comment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Comment) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

// Data type t2_
type Account struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CommentKarma     *int32                 `protobuf:"varint,1,opt,name=comment_karma,json=commentKarma,proto3,oneof" json:"comment_karma,omitempty"`
	HasMail          *bool                  `protobuf:"varint,2,opt,name=has_mail,json=hasMail,proto3,oneof" json:"has_mail,omitempty"`
	HasModMail       *bool                  `protobuf:"varint,3,opt,name=has_mod_mail,json=hasModMail,proto3,oneof" json:"has_mod_mail,omitempty"`
	HasVerifiedEmail *bool                  `protobuf:"varint,4,opt,name=has_verified_email,json=hasVerifiedEmail,proto3,oneof" json:"has_verified_email,omitempty"`
	InboxCount       *int32                 `protobuf:"varint,5,opt,name=inbox_count,json=inboxCount,proto3,oneof" json:"inbox_count,omitempty"`
	IsFriend         *bool                  `protobuf:"varint,6,opt,name=is_friend,json=isFriend,proto3,oneof" json:"is_friend,omitempty"`
	IsGold           *bool                  `protobuf:"varint,7,opt,name=is_gold,json=isGold,proto3,oneof" json:"is_gold,omitempty"`
	IsMod            *bool                  `protobuf:"varint,8,opt,name=is_mod,json=isMod,proto3,oneof" json:"is_mod,omitempty"`
	LinkKarma        *int32                 `protobuf:"varint,9,opt,name=link_karma,json=linkKarma,proto3,oneof" json:"link_karma,omitempty"`
	Modhash          *string                `protobuf:"bytes,10,opt,name=modhash,proto3,oneof" json:"modhash,omitempty"`
	Over_18          *bool                  `protobuf:"varint,11,opt,name=over_18,json=over18,proto3,oneof" json:"over_18,omitempty"`
	GoldCredits      *int32                 `protobuf:"varint,12,opt,name=gold_credits,json=goldCredits,proto3,oneof" json:"gold_credits,omitempty"`
	GoldExpiration   *float64               `protobuf:"fixed64,13,opt,name=gold_expiration,json=goldExpiration,proto3,oneof" json:"gold_expiration,omitempty"`
	HideFromRobots   *bool                  `protobuf:"varint,14,opt,name=hide_from_robots,json=hideFromRobots,proto3,oneof" json:"hide_from_robots,omitempty"`
	// Implements Created
	Created    *float64 `protobuf:"fixed64,15,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatedUtc *float64 `protobuf:"fixed64,16,opt,name=created_utc,json=createdUtc,proto3,oneof" json:"created_utc,omitempty"`
	// Implements Thing
	Id            *string `protobuf:"bytes,17,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          *string `protobuf:"bytes,18,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Account) Reset() {
	*x = Account{}
	mi := &file_reddit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_reddit_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetCommentKarma() int32 {
	if x != nil && x.CommentKarma != nil {
		return *x.CommentKarma
	}
	return 0
}

func (x *Account) GetHasMail() bool {
	if x != nil && x.HasMail != nil {
		return *x.HasMail
	}
	return false
}

func (x *Account) GetHasModMail() bool {
	if x != nil && x.HasModMail != nil {
		return *x.HasModMail
	}
	return false
}

func (x *Account) GetHasVerifiedEmail() bool {
	if x != nil && x.HasVerifiedEmail != nil {
		return *x.HasVerifiedEmail
	}
	return false
}

func (x *Account) GetInboxCount() int32 {
	if x != nil && x.InboxCount != nil {
		return *x.InboxCount
	}
	return 0
}

func (x *Account) GetIsFriend() bool {
	if x != nil && x.IsFriend != nil {
		return *x.IsFriend
	}
	return false
}

func (x *Account) GetIsGold() bool {
	if x != nil && x.IsGold != nil {
		return *x.IsGold
	}
	return false
}

func (x *Account) GetIsMod() bool {
	if x != nil && x.IsMod != nil {
		return *x.IsMod
	}
	return false
}

func (x *Account) GetLinkKarma() int32 {
	if x != nil && x.LinkKarma != nil {
		return *x.LinkKarma
	}
	return 0
}

func (x *Account) GetModhash() string {
	if x != nil && x.Modhash != nil {
		return *x.Modhash
	}
	return ""
}

func (x *Account) GetOver_18() bool {
	if x != nil && x.Over_18 != nil {
		return *x.Over_18
	}
	return false
}

func (x *Account) GetGoldCredits() int32 {
	if x != nil && x.GoldCredits != nil {
		return *x.GoldCredits
	}
	return 0
}

func (x *Account) GetGoldExpiration() float64 {
	if x != nil && x.GoldExpiration != nil {
		return *x.GoldExpiration
	}
	return 0
}

func (x *Account) GetHideFromRobots() bool {
	if x != nil && x.HideFromRobots != nil {
		return *x.HideFromRobots
	}
	return false
}

func (x *Account) GetCreated() float64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Account) GetCreatedUtc() float64 {
	if x != nil && x.CreatedUtc != nil {
		return *x.CreatedUtc
	}
	return 0
}

func (x *Account) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Data type t3_
type Link struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Author              *string                `protobuf:"bytes,1,opt,name=author,proto3,oneof" json:"author,omitempty"`
	AuthorFlairCssClass *string                `protobuf:"bytes,2,opt,name=author_flair_css_class,json=authorFlairCssClass,proto3,oneof" json:"author_flair_css_class,omitempty"`
	AuthorFlairText     *string                `protobuf:"bytes,3,opt,name=author_flair_text,json=authorFlairText,proto3,oneof" json:"author_flair_text,omitempty"`
	Clicked             *bool                  `protobuf:"varint,4,opt,name=clicked,proto3,oneof" json:"clicked,omitempty"`
	Domain              *string                `protobuf:"bytes,5,opt,name=domain,proto3,oneof" json:"domain,omitempty"`
	Hidden              *bool                  `protobuf:"varint,6,opt,name=hidden,proto3,oneof" json:"hidden,omitempty"`
	IsSelf              *bool                  `protobuf:"varint,7,opt,name=is_self,json=isSelf,proto3,oneof" json:"is_self,omitempty"`
	LinkFlairCssClass   *string                `protobuf:"bytes,8,opt,name=link_flair_css_class,json=linkFlairCssClass,proto3,oneof" json:"link_flair_css_class,omitempty"`
	LinkFlairText       *string                `protobuf:"bytes,9,opt,name=link_flair_text,json=linkFlairText,proto3,oneof" json:"link_flair_text,omitempty"`
	// Field 10 is reserved for "media".
	// Field 11 is reserved for "media_embed".
	NumComments  *int32  `protobuf:"varint,12,opt,name=num_comments,json=numComments,proto3,oneof" json:"num_comments,omitempty"`
	Over_18      *bool   `protobuf:"varint,13,opt,name=over_18,json=over18,proto3,oneof" json:"over_18,omitempty"`
	Permalink    *string `protobuf:"bytes,14,opt,name=permalink,proto3,oneof" json:"permalink,omitempty"`
	Saved        *bool   `protobuf:"varint,15,opt,name=saved,proto3,oneof" json:"saved,omitempty"`
	Score        *int32  `protobuf:"varint,16,opt,name=score,proto3,oneof" json:"score,omitempty"`
	Selftext     *string `protobuf:"bytes,17,opt,name=selftext,proto3,oneof" json:"selftext,omitempty"`
	SelftextHtml *string `protobuf:"bytes,18,opt,name=selftext_html,json=selftextHtml,proto3,oneof" json:"selftext_html,omitempty"`
	Subreddit    *string `protobuf:"bytes,19,opt,name=subreddit,proto3,oneof" json:"subreddit,omitempty"`
	SubredditId  *string `protobuf:"bytes,20,opt,name=subreddit_id,json=subredditId,proto3,oneof" json:"subreddit_id,omitempty"`
	Thumbnail    *string `protobuf:"bytes,21,opt,name=thumbnail,proto3,oneof" json:"thumbnail,omitempty"`
	Title        *string `protobuf:"bytes,22,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Url          *string `protobuf:"bytes,23,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// Field 24 is reserved for "edited".
	Distinguished *string `protobuf:"bytes,24,opt,name=distinguished,proto3,oneof" json:"distinguished,omitempty"`
	Stickied      *bool   `protobuf:"varint,25,opt,name=stickied,proto3,oneof" json:"stickied,omitempty"`
	// Implements Created
	Created    *float64 `protobuf:"fixed64,26,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatedUtc *float64 `protobuf:"fixed64,27,opt,name=created_utc,json=createdUtc,proto3,oneof" json:"created_utc,omitempty"`
	// Implements Votable
	Ups   *int32 `protobuf:"varint,28,opt,name=ups,proto3,oneof" json:"ups,omitempty"`
	Downs *int32 `protobuf:"varint,29,opt,name=downs,proto3,oneof" json:"downs,omitempty"`
	Likes *bool  `protobuf:"varint,30,opt,name=likes,proto3,oneof" json:"likes,omitempty"`
	// Implements Thing
	Id   *string `protobuf:"bytes,31,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name *string `protobuf:"bytes,32,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Comment tree (not provided by Reddit).
	Comments      []*Comment `protobuf:"bytes,33,rep,name=comments,proto3" json:"comments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_reddit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_reddit_proto_rawDescGZIP(), []int{2}
}

func (x *Link) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Link) GetAuthorFlairCssClass() string {
	if x != nil && x.AuthorFlairCssClass != nil {
		return *x.AuthorFlairCssClass
	}
	return ""
}

func (x *Link) GetAuthorFlairText() string {
	if x != nil && x.AuthorFlairText != nil {
		return *x.AuthorFlairText
	}
	return ""
}

func (x *Link) GetClicked() bool {
	if x != nil && x.Clicked != nil {
		return *x.Clicked
	}
	return false
}

func (x *Link) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *Link) GetHidden() bool {
	if x != nil && x.Hidden != nil {
		return *x.Hidden
	}
	return false
}

func (x *Link) GetIsSelf() bool {
	if x != nil && x.IsSelf != nil {
		return *x.IsSelf
	}
	return false
}

func (x *Link) GetLinkFlairCssClass() string {
	if x != nil && x.LinkFlairCssClass != nil {
		return *x.LinkFlairCssClass
	}
	return ""
}

func (x *Link) GetLinkFlairText() string {
	if x != nil && x.LinkFlairText != nil {
		return *x.LinkFlairText
	}
	return ""
}

func (x *Link) GetNumComments() int32 {
	if x != nil && x.NumComments != nil {
		return *x.NumComments
	}
	return 0
}

func (x *Link) GetOver_18() bool {
	if x != nil && x.Over_18 != nil {
		return *x.Over_18
	}
	return false
}

func (x *Link) GetPermalink() string {
	if x != nil && x.Permalink != nil {
		return *x.Permalink
	}
	return ""
}

func (x *Link) GetSaved() bool {
	if x != nil && x.Saved != nil {
		return *x.Saved
	}
	return false
}

func (x *Link) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *Link) GetSelftext() string {
	if x != nil && x.Selftext != nil {
		return *x.Selftext
	}
	return ""
}

func (x *Link) GetSelftextHtml() string {
	if x != nil && x.SelftextHtml != nil {
		return *x.SelftextHtml
	}
	return ""
}

func (x *Link) GetSubreddit() string {
	if x != nil && x.Subreddit != nil {
		return *x.Subreddit
	}
	return ""
}

func (x *Link) GetSubredditId() string {
	if x != nil && x.SubredditId != nil {
		return *x.SubredditId
	}
	return ""
}

func (x *Link) GetThumbnail() string {
	if x != nil && x.Thumbnail != nil {
		return *x.Thumbnail
	}
	return ""
}

func (x *Link) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Link) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Link) GetDistinguished() string {
	if x != nil && x.Distinguished != nil {
		return *x.Distinguished
	}
	return ""
}

func (x *Link) GetStickied() bool {
	if x != nil && x.Stickied != nil {
		return *x.Stickied
	}
	return false
}

func (x *Link) GetCreated() float64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Link) GetCreatedUtc() float64 {
	if x != nil && x.CreatedUtc != nil {
		return *x.CreatedUtc
	}
	return 0
}

func (x *Link) GetUps() int32 {
	if x != nil && x.Ups != nil {
		return *x.Ups
	}
	return 0
}

func (x *Link) GetDowns() int32 {
	if x != nil && x.Downs != nil {
		return *x.Downs
	}
	return 0
}

func (x *Link) GetLikes() bool {
	if x != nil && x.Likes != nil {
		return *x.Likes
	}
	return false
}

func (x *Link) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Link) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Link) GetComments() []*Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

// LinkSet holds links and data set annotations.
type LinkSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Links         []*Link                `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
	Data          *string                `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkSet) Reset() {
	*x = LinkSet{}
	mi := &file_reddit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkSet) ProtoMessage() {}

func (x *LinkSet) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkSet.ProtoReflect.Descriptor instead.
func (*LinkSet) Descriptor() ([]byte, []int) {
	return file_reddit_proto_rawDescGZIP(), []int{3}
}

func (x *LinkSet) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *LinkSet) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

// Data type t4_
type Message struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Author   *string                `protobuf:"bytes,1,opt,name=author,proto3,oneof" json:"author,omitempty"`
	Body     *string                `protobuf:"bytes,2,opt,name=body,proto3,oneof" json:"body,omitempty"`
	BodyHtml *string                `protobuf:"bytes,3,opt,name=body_html,json=bodyHtml,proto3,oneof" json:"body_html,omitempty"`
	Context  *string                `protobuf:"bytes,4,opt,name=context,proto3,oneof" json:"context,omitempty"`
	// Field 5 reserved for mystic "first_message".
	FirstMessageName *string `protobuf:"bytes,6,opt,name=first_message_name,json=firstMessageName,proto3,oneof" json:"first_message_name,omitempty"`
	Likes            *bool   `protobuf:"varint,7,opt,name=likes,proto3,oneof" json:"likes,omitempty"`
	LinkTitle        *string `protobuf:"bytes,8,opt,name=link_title,json=linkTitle,proto3,oneof" json:"link_title,omitempty"`
	New              *bool   `protobuf:"varint,9,opt,name=new,proto3,oneof" json:"new,omitempty"`
	ParentId         *string `protobuf:"bytes,10,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Replies          *string `protobuf:"bytes,11,opt,name=replies,proto3,oneof" json:"replies,omitempty"`
	Subject          *string `protobuf:"bytes,12,opt,name=subject,proto3,oneof" json:"subject,omitempty"`
	Subreddit        *string `protobuf:"bytes,13,opt,name=subreddit,proto3,oneof" json:"subreddit,omitempty"`
	WasComment       *bool   `protobuf:"varint,14,opt,name=was_comment,json=wasComment,proto3,oneof" json:"was_comment,omitempty"`
	// Implements Created
	Created    *float64 `protobuf:"fixed64,15,opt,name=created,proto3,oneof" json:"created,omitempty"`
	CreatedUtc *float64 `protobuf:"fixed64,16,opt,name=created_utc,json=createdUtc,proto3,oneof" json:"created_utc,omitempty"`
	// Implements Thing
	Id   *string `protobuf:"bytes,17,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name *string `protobuf:"bytes,18,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// This field contains the chronological sequence of messages following this
	// one.
	Messages      []*Message `protobuf:"bytes,19,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_reddit_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_reddit_proto_rawDescGZIP(), []int{4}
}

func (x *Message) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Message) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *Message) GetBodyHtml() string {
	if x != nil && x.BodyHtml != nil {
		return *x.BodyHtml
	}
	return ""
}

func (x *Message) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

func (x *Message) GetFirstMessageName() string {
	if x != nil && x.FirstMessageName != nil {
		return *x.FirstMessageName
	}
	return ""
}

func (x *Message) GetLikes() bool {
	if x != nil && x.Likes != nil {
		return *x.Likes
	}
	return false
}

func (x *Message) GetLinkTitle() string {
	if x != nil && x.LinkTitle != nil {
		return *x.LinkTitle
	}
	return ""
}

func (x *Message) GetNew() bool {
	if x != nil && x.New != nil {
		return *x.New
	}
	return false
}

func (x *Message) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *Message) GetReplies() string {
	if x != nil && x.Replies != nil {
		return *x.Replies
	}
	return ""
}

func (x *Message) GetSubject() string {
	if x != nil && x.Subject != nil {
		return *x.Subject
	}
	return ""
}

func (x *Message) GetSubreddit() string {
	if x != nil && x.Subreddit != nil {
		return *x.Subreddit
	}
	return ""
}

func (x *Message) GetWasComment() bool {
	if x != nil && x.WasComment != nil {
		return *x.WasComment
	}
	return false
}

func (x *Message) GetCreated() float64 {
	if x != nil && x.Created != nil {
		return *x.Created
	}
	return 0
}

func (x *Message) GetCreatedUtc() float64 {
	if x != nil && x.CreatedUtc != nil {
		return *x.CreatedUtc
	}
	return 0
}

func (x *Message) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Message) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Data type t5_
type Subreddit struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AccountsActive  *int32                 `protobuf:"varint,1,opt,name=accounts_active,json=accountsActive,proto3,oneof" json:"accounts_active,omitempty"`
	CommentScore    *int32                 `protobuf:"varint,2,opt,name=comment_score,json=commentScore,proto3,oneof" json:"comment_score,omitempty"`
	Description     *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	DescriptionHtml *string                `protobuf:"bytes,4,opt,name=description_html,json=descriptionHtml,proto3,oneof" json:"description_html,omitempty"`
	DisplayName     *string                `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	HeaderImg       *string                `protobuf:"bytes,6,opt,name=header_img,json=headerImg,proto3,oneof" json:"header_img,omitempty"`
	// Field 7 is reserved for "header_size".
	HeaderTitle       *string `protobuf:"bytes,7,opt,name=header_title,json=headerTitle,proto3,oneof" json:"header_title,omitempty"`
	Over18            *bool   `protobuf:"varint,8,opt,name=over18,proto3,oneof" json:"over18,omitempty"`
	PublicDescription *string `protobuf:"bytes,9,opt,name=public_description,json=publicDescription,proto3,oneof" json:"public_description,omitempty"`
	PublicTraffic     *bool   `protobuf:"varint,10,opt,name=public_traffic,json=publicTraffic,proto3,oneof" json:"public_traffic,omitempty"`
	Subscribers       *int64  `protobuf:"varint,11,opt,name=subscribers,proto3,oneof" json:"subscribers,omitempty"`
	SubmissionType    *string `protobuf:"bytes,12,opt,name=submission_type,json=submissionType,proto3,oneof" json:"submission_type,omitempty"`
	SubmitLinkLabel   *string `protobuf:"bytes,13,opt,name=submit_link_label,json=submitLinkLabel,proto3,oneof" json:"submit_link_label,omitempty"`
	SubmitTextLabel   *string `protobuf:"bytes,14,opt,name=submit_text_label,json=submitTextLabel,proto3,oneof" json:"submit_text_label,omitempty"`
	SubredditType     *string `protobuf:"bytes,15,opt,name=subreddit_type,json=subredditType,proto3,oneof" json:"subreddit_type,omitempty"`
	Title             *string `protobuf:"bytes,16,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Url               *string `protobuf:"bytes,17,opt,name=url,proto3,oneof" json:"url,omitempty"`
	UserIsBanned      *bool   `protobuf:"varint,18,opt,name=user_is_banned,json=userIsBanned,proto3,oneof" json:"user_is_banned,omitempty"`
	UserIsContributor *bool   `protobuf:"varint,19,opt,name=user_is_contributor,json=userIsContributor,proto3,oneof" json:"user_is_contributor,omitempty"`
	UserIsModerator   *bool   `protobuf:"varint,20,opt,name=user_is_moderator,json=userIsModerator,proto3,oneof" json:"user_is_moderator,omitempty"`
	UserIsSubscriber  *bool   `protobuf:"varint,21,opt,name=user_is_subscriber,json=userIsSubscriber,proto3,oneof" json:"user_is_subscriber,omitempty"`
	// Implements Thing
	Id            *string `protobuf:"bytes,22,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Name          *string `protobuf:"bytes,24,opt,name=name,proto3,oneof" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subreddit) Reset() {
	*x = Subreddit{}
	mi := &file_reddit_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subreddit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subreddit) ProtoMessage() {}

func (x *Subreddit) ProtoReflect() protoreflect.Message {
	mi := &file_reddit_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subreddit.ProtoReflect.Descriptor instead.
func (*Subreddit) Descriptor() ([]byte, []int) {
	return file_reddit_proto_rawDescGZIP(), []int{5}
}

func (x *Subreddit) GetAccountsActive() int32 {
	if x != nil && x.AccountsActive != nil {
		return *x.AccountsActive
	}
	return 0
}

func (x *Subreddit) GetCommentScore() int32 {
	if x != nil && x.CommentScore != nil {
		return *x.CommentScore
	}
	return 0
}

func (x *Subreddit) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Subreddit) GetDescriptionHtml() string {
	if x != nil && x.DescriptionHtml != nil {
		return *x.DescriptionHtml
	}
	return ""
}

func (x *Subreddit) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *Subreddit) GetHeaderImg() string {
	if x != nil && x.HeaderImg != nil {
		return *x.HeaderImg
	}
	return ""
}

func (x *Subreddit) GetHeaderTitle() string {
	if x != nil && x.HeaderTitle != nil {
		return *x.HeaderTitle
	}
	return ""
}

func (x *Subreddit) GetOver18() bool {
	if x != nil && x.Over18 != nil {
		return *x.Over18
	}
	return false
}

func (x *Subreddit) GetPublicDescription() string {
	if x != nil && x.PublicDescription != nil {
		return *x.PublicDescription
	}
	return ""
}

func (x *Subreddit) GetPublicTraffic() bool {
	if x != nil && x.PublicTraffic != nil {
		return *x.PublicTraffic
	}
	return false
}

func (x *Subreddit) GetSubscribers() int64 {
	if x != nil && x.Subscribers != nil {
		return *x.Subscribers
	}
	return 0
}

func (x *Subreddit) GetSubmissionType() string {
	if x != nil && x.SubmissionType != nil {
		return *x.SubmissionType
	}
	return ""
}

func (x *Subreddit) GetSubmitLinkLabel() string {
	if x != nil && x.SubmitLinkLabel != nil {
		return *x.SubmitLinkLabel
	}
	return ""
}

func (x *Subreddit) GetSubmitTextLabel() string {
	if x != nil && x.SubmitTextLabel != nil {
		return *x.SubmitTextLabel
	}
	return ""
}

func (x *Subreddit) GetSubredditType() string {
	if x != nil && x.SubredditType != nil {
		return *x.SubredditType
	}
	return ""
}

func (x *Subreddit) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Subreddit) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Subreddit) GetUserIsBanned() bool {
	if x != nil && x.UserIsBanned != nil {
		return *x.UserIsBanned
	}
	return false
}

func (x *Subreddit) GetUserIsContributor() bool {
	if x != nil && x.UserIsContributor != nil {
		return *x.UserIsContributor
	}
	return false
}

func (x *Subreddit) GetUserIsModerator() bool {
	if x != nil && x.UserIsModerator != nil {
		return *x.UserIsModerator
	}
	return false
}

func (x *Subreddit) GetUserIsSubscriber() bool {
	if x != nil && x.UserIsSubscriber != nil {
		return *x.UserIsSubscriber
	}
	return false
}

func (x *Subreddit) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Subreddit) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

var File_reddit_proto protoreflect.FileDescriptor

var file_reddit_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x09, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x73, 0x73, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x43, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66,
	0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x67, 0x69, 0x6c, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x07, 0x52, 0x06, 0x67, 0x69, 0x6c, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x55,
	0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x74,
	0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x55, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x70, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x03, 0x75, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12,
	0x52, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x05, 0x6c, 0x69, 0x6b,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x14, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x63,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68,
	0x74, 0x6d, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x67, 0x69, 0x6c, 0x64, 0x65, 0x64, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x70, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6b,
	0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x91,
	0x07, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x61, 0x72, 0x6d,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x5f,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x68,
	0x61, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x10, 0x68, 0x61, 0x73, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x06, 0x69, 0x73, 0x47, 0x6f, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4b, 0x61, 0x72, 0x6d,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x68, 0x61, 0x73, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x38, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x38, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0c, 0x52, 0x0e, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0d, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x74, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x61, 0x72, 0x6d, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x61, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6b,
	0x61, 0x72, 0x6d, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x6f, 0x64, 0x68, 0x61, 0x73, 0x68,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x38, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x74, 0x63, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xcb, 0x0b, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x43, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61,
	0x69, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x06, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x66, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b,
	0x46, 0x6c, 0x61, 0x69, 0x72, 0x43, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x6c, 0x69, 0x6e,
	0x6b, 0x46, 0x6c, 0x61, 0x69, 0x72, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x38,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x38,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x74, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x65, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x17, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x74,
	0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x18, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x55, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x70, 0x73, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x19, 0x52, 0x03, 0x75, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x1a,
	0x52, 0x05, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x05, 0x6c, 0x69, 0x6b,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x1c, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1d, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69,
	0x72, 0x5f, 0x63, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x63,
	0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x66, 0x6c, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x38, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x65, 0x6c, 0x66, 0x74, 0x65, 0x78, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6c,
	0x66, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x74, 0x63, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x70, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x73,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x54, 0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad, 0x06, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x62,
	0x6f, 0x64, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6e,
	0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x77, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0a, 0x77, 0x61,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0e, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x74, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x74,
	0x6d, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6e, 0x65, 0x77, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x74, 0x63, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc0, 0x0a, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x6d, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x31,
	0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x31,
	0x38, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x11, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x12, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x49, 0x73,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x16, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x31, 0x38, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6d, 0x69, 0x73, 0x6b, 0x6f, 0x76, 0x69,
	0x63, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reddit_proto_rawDescOnce sync.Once
	file_reddit_proto_rawDescData = file_reddit_proto_rawDesc
)

func file_reddit_proto_rawDescGZIP() []byte {
	file_reddit_proto_rawDescOnce.Do(func() {
		file_reddit_proto_rawDescData = protoimpl.X.CompressGZIP(file_reddit_proto_rawDescData)
	})
	return file_reddit_proto_rawDescData
}

var file_reddit_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_reddit_proto_goTypes = []any{
	(*Comment)(nil),   // 0: redditproto.Comment
	(*Account)(nil),   // 1: redditproto.Account
	(*Link)(nil),      // 2: redditproto.Link
	(*LinkSet)(nil),   // 3: redditproto.LinkSet
	(*Message)(nil),   // 4: redditproto.Message
	(*Subreddit)(nil), // 5: redditproto.Subreddit
}
var file_reddit_proto_depIdxs = []int32{
	0, // 0: redditproto.Comment.replies:type_name -> redditproto.Comment
	0, // 1: redditproto.Link.comments:type_name -> redditproto.Comment
	2, // 2: redditproto.LinkSet.links:type_name -> redditproto.Link
	4, // 3: redditproto.Message.messages:type_name -> redditproto.Message
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_reddit_proto_init() }
func file_reddit_proto_init() {
	if File_reddit_proto != nil {
		return
	}
	file_reddit_proto_msgTypes[0].OneofWrappers = []any{}
	file_reddit_proto_msgTypes[1].OneofWrappers = []any{}
	file_reddit_proto_msgTypes[2].OneofWrappers = []any{}
	file_reddit_proto_msgTypes[3].OneofWrappers = []any{}
	file_reddit_proto_msgTypes[4].OneofWrappers = []any{}
	file_reddit_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reddit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_reddit_proto_goTypes,
		DependencyIndexes: file_reddit_proto_depIdxs,
		MessageInfos:      file_reddit_proto_msgTypes,
	}.Build()
	File_reddit_proto = out.File
	file_reddit_proto_rawDesc = nil
	file_reddit_proto_goTypes = nil
	file_reddit_proto_depIdxs = nil
}
